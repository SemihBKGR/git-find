diff --git a/README.md b/README.md
index 3408089..bc16c36 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,5 @@
 # git-find

-utility tool to find something on git commits
+utility tool to search texts on specific git commits
+
+
diff --git a/find.go b/find.go
index 0f8a31c..56be3d7 100644
--- a/find.go
+++ b/find.go
@@ -15,7 +15,6 @@ var (
 	help       bool
 	removed    bool
 	regex      bool
-	search     string
 )

 func init() {
@@ -24,8 +23,8 @@ func init() {
 		return
 	}

-	flag.StringVar(&commit, "commit", "", "commit on which you want to find")
-	flag.BoolVar(&ignoreCase, "ignore-case", false, "case sensitivity")
+	flag.StringVar(&commit, "commit", "", "the commit on which you want to find")
+	flag.BoolVar(&ignoreCase, "ignore-case", false, "ignore case sensitivity")
 	flag.BoolVar(&help, "help", false, "print args")
 	flag.BoolVar(&removed, "removed", false, "include removed lines")
 	flag.BoolVar(&regex, "regex", false, "apply regex")
@@ -36,20 +35,6 @@ func init() {
 		os.Exit(0)
 	}

-	search = flag.Arg(0)
-
-	if search == "" {
-		fmt.Fprintln(os.Stderr, "Search var cannot be empty")
-		os.Exit(1)
-	}
-
-	fmt.Printf("commit: %s\n", commit)
-	fmt.Printf("ignoreCase: %v\n", ignoreCase)
-	fmt.Printf("help: %v\n", help)
-	fmt.Printf("removed: %v\n", removed)
-	fmt.Printf("regex: %v\n", regex)
-	fmt.Printf("search: %s\n", search)
-
 }

 func find(diffs []*diff, keyword string, ignoreCase bool, removed bool) []*diff {
@@ -86,6 +71,13 @@ func findRegex(diffs []*diff, regexp *regexp.Regexp, removed bool) []*diff {

 func main() {

+	searchTerms := flag.Args()
+
+	if len(searchTerms) == 0 {
+		//todo: warn
+		os.Exit(0)
+	}
+
 	var c *exec.Cmd

 	if commit == "" {
@@ -116,18 +108,20 @@ func main() {
 		panic(err)
 	}

-	//
-
-	var foundDiffs []*diff
+	var foundDiffs = make([]*diff, 0, 10)

 	if regex {
-		regexp, err := regexp.Compile(search)
-		if err != nil {
-			panic(err)
+		for _, searchTerm := range searchTerms {
+			regexp, err := regexp.Compile(searchTerm)
+			if err != nil {
+				panic(err)
+			}
+			foundDiffs = append(foundDiffs, findRegex(diffs, regexp, removed)...)
 		}
-		foundDiffs = findRegex(diffs, regexp, removed)
 	} else {
-		foundDiffs = find(diffs, flag.Arg(0), ignoreCase, removed)
+		for _, word := range searchTerms {
+			foundDiffs = append(foundDiffs, find(diffs, word, ignoreCase, removed)...)
+		}
 	}

 	for _, foundDiff := range foundDiffs {
diff --git a/parse.go b/parse.go
index bff7d78..3b0315a 100644
--- a/parse.go
+++ b/parse.go
@@ -26,7 +26,7 @@ func parseDiff(s string) ([]*diff, error) {
 	changedFiles := splitByLinePrefix(s, "diff --git")
 	for i := 0; i < len(changedFiles); i++ {
 		changedSnippets := splitByLinePrefix(changedFiles[i], "@@")
-		filename := parseMetadata(changedSnippets[0])
+		preFilename, newFilename := parseMetadata(changedSnippets[0])
 		for j := 1; j < len(changedSnippets); j++ {
 			lines := strings.Split(changedSnippets[j], "\n")
 			minusLineNumber, plusLineNumber := extractLineNumber(lines[0])
@@ -35,7 +35,7 @@ func parseDiff(s string) ([]*diff, error) {
 				if len(line) > 0 && (line[0] == '+' || line[0] == '-') {
 					if line[0] == '-' {
 						diffLine := diff{
-							filename:   filename,
+							filename:   preFilename,
 							content:    line[1:],
 							isAdded:    false,
 							lineNumber: minusLineNumber,
@@ -44,7 +44,7 @@ func parseDiff(s string) ([]*diff, error) {
 						minusLineNumber++
 					} else {
 						diffLine := diff{
-							filename:   filename,
+							filename:   newFilename,
 							content:    line[1:],
 							isAdded:    true,
 							lineNumber: plusLineNumber,
@@ -62,13 +62,19 @@ func parseDiff(s string) ([]*diff, error) {
 	return diffs, nil
 }

-func parseMetadata(m string) string {
+func parseMetadata(m string) (string, string) {
+	preFilename := ""
+	newFilename := ""
 	for _, l := range strings.Split(m, "\n") {
-		if strings.HasPrefix(l, "+++") {
-			return l[6:]
+		if strings.HasPrefix(l, "---") {
+			i := strings.IndexRune(l, '/')
+			preFilename = l[i+1:]
+		} else if strings.HasPrefix(l, "+++") {
+			i := strings.IndexRune(l, '/')
+			newFilename = l[i+1:]
 		}
 	}
-	return ""
+	return preFilename, newFilename
 }

 func extractLineNumber(m string) (uint, uint) {
